generator client {
    provider      = "prisma-client-js"
    output        = "../../../node_modules/@prisma-clients/user"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id          String    @id // Same as Auth User ID (from auth_db.users.id)
    email       String    @unique
    fullName    String    @map("full_name")
    phone       String    @unique
    role        Role
    avatarUrl   String    @default("https://cdn-icons-png.freepik.com/512/3607/3607444.png") @map("avatar_url")
    facebookUrl String?   @map("facebook_url")
    creditScore Int       @default(100) @map("credit_score")
    bio         String    @default("Xin chào")
    birthDate   DateTime? @map("birth_date")
    gender      Gender    @default(OTHER)
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")

    driverLicense DriverLicense?
    addresses     Address[]
    bankAccount   BankAccount?

    @@index([email])
    @@index([phone])
    @@map("user_profiles")
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum Role {
    USER
    ADMIN
    SUPER_ADMIN
}

model DriverLicense {
    id             String       @id @default(uuid())
    userId         String       @unique @map("user_id")
    licenseNumber  String       @unique @map("license_number")
    fullName       String       @map("full_name")
    dateOfBirth    DateTime     @map("date_of_birth")
    licenseClass   LicenseClass @map("license_class") // A1, A2, B1, B2, C, D, E, F
    issueDate      DateTime     @map("issue_date")
    expiryDate     DateTime     @map("expiry_date")
    issuePlace     String       @map("issue_place")
    frontImageUrl  String       @map("front_image_url")
    backImageUrl   String       @map("back_image_url")
    selfieImageUrl String       @map("selfie_image_url")
    isVerified     Boolean      @default(false) @map("is_verified")
    verifiedAt     DateTime?    @map("verified_at")
    rejectedReason String?      @map("rejected_reason")
    createdAt      DateTime     @default(now()) @map("created_at")
    updatedAt      DateTime     @updatedAt @map("updated_at")

    profile Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([licenseNumber])
    @@index([userId])
    @@map("driver_licenses")
}

enum LicenseClass {
    A1
    A2
    B1
    B2
    C
    D
    E
    F
}

model Address {
    id        String   @id @default(uuid())
    userId    String   @map("user_id")
    label     String // "Nhà riêng", "Công ty", "Nhà bạn"...
    city      String
    ward      String
    detail    String // Số nhà, tên đường
    latitude  Float?
    longitude Float?
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    profile Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, label])
    @@index([userId, id])
    @@index([userId])
    @@map("addresses")
}

model BankAccount {
    id            String   @id @default(uuid())
    userId        String   @unique @map("user_id") // @unique makes it 1-to-1
    bankName      String   @map("bank_name")
    bankCode      String   @map("bank_code") // VCB, TCB, VTB, etc.
    accountNumber String   @unique @map("account_number") // Unique globally
    accountHolder String   @map("account_holder")
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @updatedAt @map("updated_at")

    profile Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([accountNumber])
    @@index([userId])
    @@map("bank_accounts")
}
