// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

/** GetProfile */
export interface GetProfileRequest {
  userId: string;
}

export interface GetProfileResponse {
  id: string;
  email: string;
  fullName: string;
  phone: string;
  role: string;
  gender?: string | undefined;
  avatarUrl?: string | undefined;
  facebookUrl?: string | undefined;
  bio?: string | undefined;
  birthDate?: string | undefined;
  creditScore: number;
  createdAt: string;
  updatedAt: string;
  driverLicense?: GetDriverLicenseResponse | undefined;
  bankAccount?: GetBankAccountResponse | undefined;
  addresses: GetAddressResponse[];
}

/** FindAllProfiles */
export interface FindAllProfilesRequest {
  fullName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  role?: string | undefined;
  page: number;
  limit: number;
}

export interface FindAllProfilesResponse {
  profiles: GetProfileResponse[];
  totalItems: number;
  page: number;
  limit: number;
  totalPages: number;
}

/** UpdateProfile */
export interface UpdateProfileRequest {
  userId: string;
  fullName?: string | undefined;
  phone?: string | undefined;
  avatarUrl?: string | undefined;
  facebookUrl?: string | undefined;
  bio?: string | undefined;
  birthDate?: string | undefined;
  gender?: string | undefined;
  email?: string | undefined;
}

/** GetDriverLicense */
export interface GetDriverLicenseRequest {
  userId: string;
}

export interface GetDriverLicenseResponse {
  id: string;
  userId: string;
  licenseNumber: string;
  fullName: string;
  dateOfBirth: string;
  licenseClass: string;
  issueDate: string;
  expiryDate: string;
  issuePlace: string;
  frontImageUrl: string;
  backImageUrl: string;
  selfieImageUrl: string;
  isVerified: boolean;
  verifiedAt: string;
  rejectedReason: string;
  createdAt: string;
  updatedAt: string;
}

/** CreateDriverLicense */
export interface CreateDriverLicenseRequest {
  userId: string;
  licenseNumber: string;
  fullName: string;
  dateOfBirth: string;
  licenseClass: string;
  issueDate: string;
  expiryDate: string;
  issuePlace: string;
  frontImageUrl: string;
  backImageUrl: string;
  selfieImageUrl: string;
}

/** UpdateDriverLicense */
export interface UpdateDriverLicenseRequest {
  userId: string;
  licenseNumber?: string | undefined;
  fullName?: string | undefined;
  dateOfBirth?: string | undefined;
  licenseClass?: string | undefined;
  issueDate?: string | undefined;
  expiryDate?: string | undefined;
  issuePlace?: string | undefined;
  frontImageUrl?: string | undefined;
  backImageUrl?: string | undefined;
  selfieImageUrl?: string | undefined;
}

/** GetBankAccount */
export interface GetBankAccountRequest {
  userId: string;
}

export interface GetBankAccountResponse {
  id: string;
  userId: string;
  bankName: string;
  bankCode: string;
  accountNumber: string;
  accountHolder: string;
  createdAt: string;
  updatedAt: string;
}

/** CreateBankAccount */
export interface CreateBankAccountRequest {
  userId: string;
  bankName: string;
  bankCode: string;
  accountNumber: string;
  accountHolder: string;
}

/** UpdateBankAccount */
export interface UpdateBankAccountRequest {
  userId: string;
  bankName?: string | undefined;
  bankCode?: string | undefined;
  accountNumber?: string | undefined;
  accountHolder?: string | undefined;
}

/** GetAddress */
export interface GetAddressRequest {
  id: string;
  userId: string;
}

export interface GetAddressResponse {
  id: string;
  userId: string;
  label: string;
  city: string;
  ward: string;
  detail: string;
  latitude?: number | undefined;
  longitude?: number | undefined;
  createdAt: string;
  updatedAt: string;
}

/** GetManyAddress */
export interface GetManyAddressRequest {
  userId: string;
}

export interface GetManyAddressResponse {
  addresses: GetAddressResponse[];
}

/** CreateAddress */
export interface CreateAddressRequest {
  userId: string;
  label: string;
  city: string;
  ward: string;
  detail: string;
  latitude?: number | undefined;
  longitude?: number | undefined;
}

/** UpdateAddress */
export interface UpdateAddressRequest {
  id: string;
  userId: string;
  label?: string | undefined;
  city?: string | undefined;
  ward?: string | undefined;
  detail?: string | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
}

/** DeleteAddress */
export interface DeleteAddressRequest {
  id: string;
  userId: string;
}

export interface DeleteAddressResponse {
  message: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  getProfile(request: GetProfileRequest): Observable<GetProfileResponse>;

  findAllProfiles(request: FindAllProfilesRequest): Observable<FindAllProfilesResponse>;

  updateProfile(request: UpdateProfileRequest): Observable<GetProfileResponse>;

  getDriverLicense(request: GetDriverLicenseRequest): Observable<GetDriverLicenseResponse>;

  createDriverLicense(request: CreateDriverLicenseRequest): Observable<GetDriverLicenseResponse>;

  updateDriverLicense(request: UpdateDriverLicenseRequest): Observable<GetDriverLicenseResponse>;

  getBankAccount(request: GetBankAccountRequest): Observable<GetBankAccountResponse>;

  createBankAccount(request: CreateBankAccountRequest): Observable<GetBankAccountResponse>;

  updateBankAccount(request: UpdateBankAccountRequest): Observable<GetBankAccountResponse>;

  getAddress(request: GetAddressRequest): Observable<GetAddressResponse>;

  getManyAddress(request: GetManyAddressRequest): Observable<GetManyAddressResponse>;

  createAddress(request: CreateAddressRequest): Observable<GetAddressResponse>;

  updateAddress(request: UpdateAddressRequest): Observable<GetAddressResponse>;

  deleteAddress(request: DeleteAddressRequest): Observable<DeleteAddressResponse>;
}

export interface UserServiceController {
  getProfile(
    request: GetProfileRequest,
  ): Promise<GetProfileResponse> | Observable<GetProfileResponse> | GetProfileResponse;

  findAllProfiles(
    request: FindAllProfilesRequest,
  ): Promise<FindAllProfilesResponse> | Observable<FindAllProfilesResponse> | FindAllProfilesResponse;

  updateProfile(
    request: UpdateProfileRequest,
  ): Promise<GetProfileResponse> | Observable<GetProfileResponse> | GetProfileResponse;

  getDriverLicense(
    request: GetDriverLicenseRequest,
  ): Promise<GetDriverLicenseResponse> | Observable<GetDriverLicenseResponse> | GetDriverLicenseResponse;

  createDriverLicense(
    request: CreateDriverLicenseRequest,
  ): Promise<GetDriverLicenseResponse> | Observable<GetDriverLicenseResponse> | GetDriverLicenseResponse;

  updateDriverLicense(
    request: UpdateDriverLicenseRequest,
  ): Promise<GetDriverLicenseResponse> | Observable<GetDriverLicenseResponse> | GetDriverLicenseResponse;

  getBankAccount(
    request: GetBankAccountRequest,
  ): Promise<GetBankAccountResponse> | Observable<GetBankAccountResponse> | GetBankAccountResponse;

  createBankAccount(
    request: CreateBankAccountRequest,
  ): Promise<GetBankAccountResponse> | Observable<GetBankAccountResponse> | GetBankAccountResponse;

  updateBankAccount(
    request: UpdateBankAccountRequest,
  ): Promise<GetBankAccountResponse> | Observable<GetBankAccountResponse> | GetBankAccountResponse;

  getAddress(
    request: GetAddressRequest,
  ): Promise<GetAddressResponse> | Observable<GetAddressResponse> | GetAddressResponse;

  getManyAddress(
    request: GetManyAddressRequest,
  ): Promise<GetManyAddressResponse> | Observable<GetManyAddressResponse> | GetManyAddressResponse;

  createAddress(
    request: CreateAddressRequest,
  ): Promise<GetAddressResponse> | Observable<GetAddressResponse> | GetAddressResponse;

  updateAddress(
    request: UpdateAddressRequest,
  ): Promise<GetAddressResponse> | Observable<GetAddressResponse> | GetAddressResponse;

  deleteAddress(
    request: DeleteAddressRequest,
  ): Promise<DeleteAddressResponse> | Observable<DeleteAddressResponse> | DeleteAddressResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getProfile",
      "findAllProfiles",
      "updateProfile",
      "getDriverLicense",
      "createDriverLicense",
      "updateDriverLicense",
      "getBankAccount",
      "createBankAccount",
      "updateBankAccount",
      "getAddress",
      "getManyAddress",
      "createAddress",
      "updateAddress",
      "deleteAddress",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
