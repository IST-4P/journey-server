// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: rental.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetComboResponse, GetDeviceResponse } from "./device";

export const protobufPackage = "rental";

/** User: Cancel Rental */
export interface CancelRentalRequest {
  rentalId: string;
  /** để verify ownership */
  userId: string;
}

export interface CancelRentalResponse {
  /** true nếu hủy thành công */
  success: boolean;
  /** thông báo kết quả */
  message: string;
  /** số tiền hoàn lại cho user */
  refundAmount: number;
  /** phần trăm hoàn lại (0-100) */
  refundPercent: number;
}

/** Single rental item (device or combo with quantity) */
export interface RentalItem {
  targetId: string;
  isCombo: boolean;
  quantity: number;
}

/** Full target details (device or combo) based on IsCombo */
export interface RentalTargetDetail {
  device?: GetDeviceResponse | undefined;
  combo?: GetComboResponse | undefined;
}

/** Rental item with details for response */
export interface RentalItemDetail {
  targetId: string;
  isCombo: boolean;
  quantity: number;
  name: string;
  unitPrice: number;
  subtotal: number;
  detail: RentalTargetDetail | undefined;
}

/** Common response */
export interface RentalResponse {
  id: string;
  userId: string;
  items: RentalItemDetail[];
  status: string;
  rentalFee: number;
  deposit: number;
  /** Max discount amount in VND that can be deducted */
  maxDiscount: number;
  totalPrice: number;
  totalQuantity: number;
  /** VAT percentage (e.g., 10 for 10%) */
  VAT: number;
  startDate: string;
  endDate: string;
  createdAt: string;
  actualEndDate?:
    | string
    | undefined;
  /** Discount percentage applied */
  discountPercent: number;
}

/** User: Create Rental */
export interface CreateRentalRequest {
  userId: string;
  /** Multiple items allowed (devices and/or combos) */
  items: RentalItem[];
  startDate: string;
  endDate: string;
  /** Discount percentage (e.g., 10 for 10%) */
  discountPercent: number;
  /** Maximum discount amount in VND */
  maxDiscount: number;
}

/** User: Get My Rentals */
export interface GetMyRentalsRequest {
  userId: string;
  page: number;
  limit: number;
  status: string;
}

export interface UserRental {
  id: string;
  items: RentalItemDetail[];
  totalPrice: number;
  maxDiscount: number;
  status: string;
  startDate: string;
  endDate: string;
  createdAt: string;
  discountPercent: number;
}

export interface GetMyRentalsResponse {
  rentals: UserRental[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

/** User/Admin: Get Rental By Id */
export interface GetRentalByIdRequest {
  rentalId: string;
}

/** Admin: Get All Rentals */
export interface GetAllRentalsRequest {
  page: number;
  limit: number;
  status: string;
  userId: string;
  /** Requester must be admin; server will validate role */
  requesterId: string;
}

export interface AdminRental {
  id: string;
  userId: string;
  /** only username (fullName) */
  userName: string;
  /** only email */
  userEmail: string;
  items: RentalItemDetail[];
  totalPrice: number;
  /** Max discount amount */
  maxDiscount: number;
  status: string;
  startDate: string;
  endDate: string;
  createdAt: string;
  /** Discount percentage applied */
  discountPercent: number;
}

export interface GetAllRentalsAdminResponse {
  rentals: AdminRental[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

export interface RentalExtensionMessage {
  id: string;
  rentalId: string;
  /** ISO string */
  newEndDate: string;
  additionalFee: number;
  additionalHours: number;
  /** userId */
  requestedBy: string;
  createdAt: string;
  notes: string;
}

export interface CreateRentalExtensionRequest {
  rentalId: string;
  requestedBy: string;
  newEndDate: string;
  additionalFee: number;
  additionalHours: number;
  notes: string;
}

export interface GetRentalExtensionsRequest {
  rentalId: string;
}

export interface GetRentalExtensionsResponse {
  extensions: RentalExtensionMessage[];
}

/** Admin: Update Rental */
export interface UpdateRentalRequest {
  rentalId: string;
  status: string;
  startDate: string;
  endDate: string;
}

/** Admin: Delete Rental */
export interface DeleteRentalRequest {
  rentalId: string;
}

export interface DeleteRentalResponse {
  message: string;
}

export const RENTAL_PACKAGE_NAME = "rental";

export interface RentalServiceClient {
  /** User operations */

  createRental(request: CreateRentalRequest): Observable<RentalResponse>;

  getMyRentals(request: GetMyRentalsRequest): Observable<GetMyRentalsResponse>;

  getRentalById(request: GetRentalByIdRequest): Observable<RentalResponse>;

  cancelRental(request: CancelRentalRequest): Observable<CancelRentalResponse>;

  /** Admin operations */

  getAllRentals(request: GetAllRentalsRequest): Observable<GetAllRentalsAdminResponse>;

  updateRental(request: UpdateRentalRequest): Observable<RentalResponse>;

  deleteRental(request: DeleteRentalRequest): Observable<DeleteRentalResponse>;

  /** Extensions: Rental time extension */

  createRentalExtension(request: CreateRentalExtensionRequest): Observable<RentalResponse>;

  getRentalExtensions(request: GetRentalExtensionsRequest): Observable<GetRentalExtensionsResponse>;
}

export interface RentalServiceController {
  /** User operations */

  createRental(request: CreateRentalRequest): Promise<RentalResponse> | Observable<RentalResponse> | RentalResponse;

  getMyRentals(
    request: GetMyRentalsRequest,
  ): Promise<GetMyRentalsResponse> | Observable<GetMyRentalsResponse> | GetMyRentalsResponse;

  getRentalById(request: GetRentalByIdRequest): Promise<RentalResponse> | Observable<RentalResponse> | RentalResponse;

  cancelRental(
    request: CancelRentalRequest,
  ): Promise<CancelRentalResponse> | Observable<CancelRentalResponse> | CancelRentalResponse;

  /** Admin operations */

  getAllRentals(
    request: GetAllRentalsRequest,
  ): Promise<GetAllRentalsAdminResponse> | Observable<GetAllRentalsAdminResponse> | GetAllRentalsAdminResponse;

  updateRental(request: UpdateRentalRequest): Promise<RentalResponse> | Observable<RentalResponse> | RentalResponse;

  deleteRental(
    request: DeleteRentalRequest,
  ): Promise<DeleteRentalResponse> | Observable<DeleteRentalResponse> | DeleteRentalResponse;

  /** Extensions: Rental time extension */

  createRentalExtension(
    request: CreateRentalExtensionRequest,
  ): Promise<RentalResponse> | Observable<RentalResponse> | RentalResponse;

  getRentalExtensions(
    request: GetRentalExtensionsRequest,
  ): Promise<GetRentalExtensionsResponse> | Observable<GetRentalExtensionsResponse> | GetRentalExtensionsResponse;
}

export function RentalServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createRental",
      "getMyRentals",
      "getRentalById",
      "cancelRental",
      "getAllRentals",
      "updateRental",
      "deleteRental",
      "createRentalExtension",
      "getRentalExtensions",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RentalService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RentalService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RENTAL_SERVICE_NAME = "RentalService";
