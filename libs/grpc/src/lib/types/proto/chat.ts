// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: chat.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "chat";

/** Chat */
export interface Chat {
  id: string;
  fromUserId: string;
  toUserId: string;
  content: string;
  createdAt: string;
}

/** GetChats */
export interface GetChatsRequest {
  fromUserId: string;
  toUserId: string;
  page: number;
  limit: number;
}

export interface GetChatsResponse {
  chats: Chat[];
}

/** CreateChat */
export interface CreateChatRequest {
  fromUserId: string;
  toUserId: string;
  content: string;
}

export interface CreateChatResponse {
  id: string;
  fromUserId: string;
  toUserId: string;
  content: string;
  createdAt: string;
}

export const CHAT_PACKAGE_NAME = "chat";

export interface ChatServiceClient {
  getChats(request: GetChatsRequest): Observable<GetChatsResponse>;

  createChat(request: CreateChatRequest): Observable<CreateChatResponse>;
}

export interface ChatServiceController {
  getChats(request: GetChatsRequest): Promise<GetChatsResponse> | Observable<GetChatsResponse> | GetChatsResponse;

  createChat(
    request: CreateChatRequest,
  ): Promise<CreateChatResponse> | Observable<CreateChatResponse> | CreateChatResponse;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getChats", "createChat"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAT_SERVICE_NAME = "ChatService";
