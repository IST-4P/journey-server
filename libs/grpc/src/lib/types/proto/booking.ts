// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: booking.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "booking";

/**
 * ======================================================== Booking
 * GetBooking
 */
export interface GetBookingRequest {
  id: string;
  userId?: string | undefined;
}

export interface GetBookingResponse {
  id: string;
  userId: string;
  vehicleId: string;
  status: string;
  startTime: string;
  endTime: string;
  duration: number;
  pickupAddress: string;
  pickupLat: number;
  pickupLng: number;
  vehicleFeeHour: number;
  rentalFee: number;
  insuranceFee: number;
  vat: number;
  discount: number;
  deposit: number;
  collateral: number;
  totalAmount: number;
  refundAmount: number;
  penaltyAmount: number;
  damageAmount: number;
  overtimeAmount: number;
  paymentStatus: string;
  paidAt?: string | undefined;
  notes?: string | undefined;
  cancelReason?: string | undefined;
  adminNotes?: string | undefined;
  damageReported: boolean;
  createdAt: string;
  updatedAt: string;
  cancelledAt?: string | undefined;
  expiredAt?: string | undefined;
}

/** GetManyBookings */
export interface GetManyBookingsRequest {
  userId?: string | undefined;
  vehicleId?: string | undefined;
  status?: string | undefined;
  page?: number | undefined;
  limit?: number | undefined;
}

export interface GetManyBookingsResponse {
  bookings: GetBookingResponse[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

/** CreateBooking */
export interface CreateBookingRequest {
  userId: string;
  vehicleId: string;
  startTime: string;
  endTime: string;
  pickupAddress: string;
  pickupLat: number;
  pickupLng: number;
  vehicleFeeHour: number;
  rentalFee: number;
  insuranceFee: number;
  vat: number;
  discount: number;
  deposit: number;
  notes?: string | undefined;
}

/** CancelBooking */
export interface CancelBookingRequest {
  id: string;
  cancelReason: string;
  cancelDate?: string | undefined;
  userId: string;
}

/**
 * ======================================================== CheckInOut
 * GetManyCheckInOuts
 */
export interface GetManyCheckInOutsRequest {
  bookingId?: string | undefined;
  userId?: string | undefined;
  type?: string | undefined;
  page?: number | undefined;
  limit?: number | undefined;
}

export interface GetManyCheckInOutsResponse {
  checkInOuts: GetCheckInOutResponse[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

/** GetCheckInOut */
export interface GetCheckInOutRequest {
  id: string;
  userId: string;
}

export interface GetCheckInOutResponse {
  id: string;
  bookingId: string;
  userId: string;
  type: string;
  latitude: number;
  longitude: number;
  address?: string | undefined;
  images: string[];
  mileage: number;
  fuelLevel: number;
  damageNotes?: string | undefined;
  damageImages: string[];
  verified: boolean;
  verifiedAt?: string | undefined;
  createdAt: string;
  updatedAt: string;
}

/** CreateCheckInOut */
export interface CreateCheckInOutRequest {
  bookingId: string;
  userId: string;
  type: string;
  latitude: number;
  longitude: number;
  address?: string | undefined;
  images: string[];
  mileage: number;
  fuelLevel: number;
  damageNotes?: string | undefined;
  damageImages: string[];
  checkDate: string;
}

/** UpdateCheckOutRequest */
export interface UpdateCheckOutRequest {
  id: string;
  mileage?: number | undefined;
  fuelLevel?: number | undefined;
  damageNotes?: string | undefined;
  damageImages: string[];
  penaltyAmount?: number | undefined;
  damageAmount?: number | undefined;
  overtimeAmount?: number | undefined;
  userId: string;
}

/** VerifyCheckInOut */
export interface VerifyCheckInOutRequest {
  id: string;
}

/**
 * ======================================================== Extension
 * GetManyExtensions
 */
export interface GetManyExtensionsRequest {
  status?: string | undefined;
  requestedBy?: string | undefined;
  page?: number | undefined;
  limit?: number | undefined;
}

export interface GetManyExtensionsResponse {
  extensions: GetExtensionResponse[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

/** GetExtension */
export interface GetExtensionRequest {
  id: string;
  requestedBy: string;
}

export interface GetExtensionResponse {
  id: string;
  bookingId: string;
  requestedBy: string;
  originalEndTime: string;
  newEndTime: string;
  additionalHours: number;
  additionalAmount: number;
  status: string;
  rejectionReason?: string | undefined;
  notes?: string | undefined;
  createdAt: string;
}

/** CreateExtension */
export interface CreateExtensionRequest {
  bookingId: string;
  requestedBy: string;
  originalEndTime: string;
  newEndTime: string;
  notes?: string | undefined;
}

/** UpdateStatusExtension */
export interface UpdateStatusExtensionRequest {
  id: string;
  rejectionReason?: string | undefined;
}

/** UpdateExtension */
export interface UpdateExtensionRequest {
  id: string;
  newEndTime: string;
  additionalHours: number;
  additionalAmount: number;
  notes?: string | undefined;
}

/**
 * ======================================================== History
 * GetManyHistories
 */
export interface GetManyHistoriesRequest {
  action?: string | undefined;
  page?: number | undefined;
  limit?: number | undefined;
}

export interface GetManyHistoriesResponse {
  histories: GetHistoryResponse[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

/** GetHistory */
export interface GetHistoryRequest {
  id: string;
}

export interface GetHistoryResponse {
  id: string;
  bookingId: string;
  action: string;
  notes?: string | undefined;
  createdAt: string;
}

/** CreateHistory */
export interface CreateHistoryRequest {
  bookingId: string;
  action: string;
  notes?: string | undefined;
}

export const BOOKING_PACKAGE_NAME = "booking";

export interface BookingServiceClient {
  getManyBookings(request: GetManyBookingsRequest): Observable<GetManyBookingsResponse>;

  getBooking(request: GetBookingRequest): Observable<GetBookingResponse>;

  createBooking(request: CreateBookingRequest): Observable<GetBookingResponse>;

  cancelBooking(request: CancelBookingRequest): Observable<GetBookingResponse>;

  getManyCheckInOuts(request: GetManyCheckInOutsRequest): Observable<GetManyCheckInOutsResponse>;

  getCheckInOut(request: GetCheckInOutRequest): Observable<GetCheckInOutResponse>;

  checkIn(request: CreateCheckInOutRequest): Observable<GetCheckInOutResponse>;

  checkOut(request: CreateCheckInOutRequest): Observable<GetCheckInOutResponse>;

  updateCheckOut(request: UpdateCheckOutRequest): Observable<GetCheckInOutResponse>;

  verifyCheckInOut(request: VerifyCheckInOutRequest): Observable<GetCheckInOutResponse>;

  getManyExtensions(request: GetManyExtensionsRequest): Observable<GetManyExtensionsResponse>;

  getExtension(request: GetExtensionRequest): Observable<GetExtensionResponse>;

  createExtension(request: CreateExtensionRequest): Observable<GetExtensionResponse>;

  approveExtension(request: UpdateStatusExtensionRequest): Observable<GetExtensionResponse>;

  rejectExtension(request: UpdateStatusExtensionRequest): Observable<GetExtensionResponse>;

  updateExtension(request: UpdateExtensionRequest): Observable<GetExtensionResponse>;

  getManyHistories(request: GetManyHistoriesRequest): Observable<GetManyHistoriesResponse>;

  getHistory(request: GetHistoryRequest): Observable<GetHistoryResponse>;

  createHistory(request: CreateHistoryRequest): Observable<GetHistoryResponse>;
}

export interface BookingServiceController {
  getManyBookings(
    request: GetManyBookingsRequest,
  ): Promise<GetManyBookingsResponse> | Observable<GetManyBookingsResponse> | GetManyBookingsResponse;

  getBooking(
    request: GetBookingRequest,
  ): Promise<GetBookingResponse> | Observable<GetBookingResponse> | GetBookingResponse;

  createBooking(
    request: CreateBookingRequest,
  ): Promise<GetBookingResponse> | Observable<GetBookingResponse> | GetBookingResponse;

  cancelBooking(
    request: CancelBookingRequest,
  ): Promise<GetBookingResponse> | Observable<GetBookingResponse> | GetBookingResponse;

  getManyCheckInOuts(
    request: GetManyCheckInOutsRequest,
  ): Promise<GetManyCheckInOutsResponse> | Observable<GetManyCheckInOutsResponse> | GetManyCheckInOutsResponse;

  getCheckInOut(
    request: GetCheckInOutRequest,
  ): Promise<GetCheckInOutResponse> | Observable<GetCheckInOutResponse> | GetCheckInOutResponse;

  checkIn(
    request: CreateCheckInOutRequest,
  ): Promise<GetCheckInOutResponse> | Observable<GetCheckInOutResponse> | GetCheckInOutResponse;

  checkOut(
    request: CreateCheckInOutRequest,
  ): Promise<GetCheckInOutResponse> | Observable<GetCheckInOutResponse> | GetCheckInOutResponse;

  updateCheckOut(
    request: UpdateCheckOutRequest,
  ): Promise<GetCheckInOutResponse> | Observable<GetCheckInOutResponse> | GetCheckInOutResponse;

  verifyCheckInOut(
    request: VerifyCheckInOutRequest,
  ): Promise<GetCheckInOutResponse> | Observable<GetCheckInOutResponse> | GetCheckInOutResponse;

  getManyExtensions(
    request: GetManyExtensionsRequest,
  ): Promise<GetManyExtensionsResponse> | Observable<GetManyExtensionsResponse> | GetManyExtensionsResponse;

  getExtension(
    request: GetExtensionRequest,
  ): Promise<GetExtensionResponse> | Observable<GetExtensionResponse> | GetExtensionResponse;

  createExtension(
    request: CreateExtensionRequest,
  ): Promise<GetExtensionResponse> | Observable<GetExtensionResponse> | GetExtensionResponse;

  approveExtension(
    request: UpdateStatusExtensionRequest,
  ): Promise<GetExtensionResponse> | Observable<GetExtensionResponse> | GetExtensionResponse;

  rejectExtension(
    request: UpdateStatusExtensionRequest,
  ): Promise<GetExtensionResponse> | Observable<GetExtensionResponse> | GetExtensionResponse;

  updateExtension(
    request: UpdateExtensionRequest,
  ): Promise<GetExtensionResponse> | Observable<GetExtensionResponse> | GetExtensionResponse;

  getManyHistories(
    request: GetManyHistoriesRequest,
  ): Promise<GetManyHistoriesResponse> | Observable<GetManyHistoriesResponse> | GetManyHistoriesResponse;

  getHistory(
    request: GetHistoryRequest,
  ): Promise<GetHistoryResponse> | Observable<GetHistoryResponse> | GetHistoryResponse;

  createHistory(
    request: CreateHistoryRequest,
  ): Promise<GetHistoryResponse> | Observable<GetHistoryResponse> | GetHistoryResponse;
}

export function BookingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getManyBookings",
      "getBooking",
      "createBooking",
      "cancelBooking",
      "getManyCheckInOuts",
      "getCheckInOut",
      "checkIn",
      "checkOut",
      "updateCheckOut",
      "verifyCheckInOut",
      "getManyExtensions",
      "getExtension",
      "createExtension",
      "approveExtension",
      "rejectExtension",
      "updateExtension",
      "getManyHistories",
      "getHistory",
      "createHistory",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BookingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BookingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOOKING_SERVICE_NAME = "BookingService";
