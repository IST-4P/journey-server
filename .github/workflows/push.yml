name: CI/CD

on:
  push:
    branches: [service]
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  # Job riêng để install dependencies 1 lần duy nhất
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: Setup protoc
        uses: arduino/setup-protoc@v3.0.0

      - name: Configure Git protocol
        run: git config --global url."https://github.com/".insteadOf git://github.com/

      # Cache node_modules để tái sử dụng
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --legacy-peer-deps

      # Upload node_modules để các job khác dùng
      - name: Upload node_modules
        uses: actions/upload-artifact@v4
        with:
          name: node_modules
          path: node_modules
          retention-days: 1

  docker:
    runs-on: ubuntu-latest
    needs: install

    strategy:
      matrix:
        service:
          - name: api
            dockerfile: apps/api/Dockerfile
          - name: admin
            dockerfile: apps/admin/Dockerfile
          - name: auth
            dockerfile: apps/auth/Dockerfile
          - name: notification
            dockerfile: apps/notification/Dockerfile
          - name: user
            dockerfile: apps/user/Dockerfile
          - name: chat
            dockerfile: apps/chat/Dockerfile

    steps:
      - uses: actions/checkout@v4

      # Download node_modules đã được build
      - name: Download node_modules
        uses: actions/download-artifact@v4
        with:
          name: node_modules
          path: node_modules

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate tag
        id: tag
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/journey-${{ matrix.service.name }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/journey-${{ matrix.service.name }}:${{ steps.tag.outputs.TAG }}
          # Thêm cache cho Docker layers
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/journey-${{ matrix.service.name }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/journey-${{ matrix.service.name }}:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_CLUSTER_ID }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: "latest"

      - name: Generate tag
        id: tag
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Create secrets file
        run: |
          echo "${{ secrets.HELM_SECRETS_PRODUCTION }}" | base64 -d > secrets.production.yaml

      - name: Upgrade Helm Release
        run: |
          helm upgrade journey ./charts/journey \
            -f secrets.production.yaml \
            --namespace journey \
            --set api.enabled=true \
            --set admin.enabled=true \
            --set auth.enabled=true \
            --set user.enabled=true \
            --set notification.enabled=true \
            --set chat.enabled=true \
            --set api.image=${{ secrets.DOCKERHUB_USERNAME }}/journey-api:${{ steps.tag.outputs.TAG }} \
            --set admin.image=${{ secrets.DOCKERHUB_USERNAME }}/journey-admin:${{ steps.tag.outputs.TAG }} \
            --set auth.image=${{ secrets.DOCKERHUB_USERNAME }}/journey-auth:${{ steps.tag.outputs.TAG }} \
            --set notification.image=${{ secrets.DOCKERHUB_USERNAME }}/journey-notification:${{ steps.tag.outputs.TAG }} \
            --set user.image=${{ secrets.DOCKERHUB_USERNAME }}/journey-user:${{ steps.tag.outputs.TAG }} \
            --set chat.image=${{ secrets.DOCKERHUB_USERNAME }}/journey-chat:${{ steps.tag.outputs.TAG }} \
            --wait \
            --timeout 5m

      - name: Verify Deployment
        run: |
          kubectl get pods -n journey
          kubectl rollout status deployment/api -n journey --timeout=3m
          kubectl rollout status deployment/admin -n journey --timeout=3m
          kubectl rollout status deployment/auth -n journey --timeout=3m
          kubectl rollout status deployment/notification -n journey --timeout=3m
          kubectl rollout status deployment/user -n journey --timeout=3m
          kubectl rollout status deployment/chat -n journey --timeout=3m
