// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: payment.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "payment";

export interface WebhookPaymentRequest {
  id: number;
  gateway: string;
  transactionDate: string;
  accountNumber?: string | undefined;
  code?: string | undefined;
  content?: string | undefined;
  transferType: string;
  transferAmount: number;
  accumulated: number;
  subAccount?: string | undefined;
  referenceCode?: string | undefined;
  description: string;
}

export interface WebhookPaymentResponse {
  message: string;
}

export const PAYMENT_PACKAGE_NAME = "payment";

export interface PaymentServiceClient {
  receiver(request: WebhookPaymentRequest): Observable<WebhookPaymentResponse>;
}

export interface PaymentServiceController {
  receiver(
    request: WebhookPaymentRequest,
  ): Promise<WebhookPaymentResponse> | Observable<WebhookPaymentResponse> | WebhookPaymentResponse;
}

export function PaymentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["receiver"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENT_SERVICE_NAME = "PaymentService";
