// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: notification.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "notification";

/** GetNotification */
export interface GetNotificationRequest {
  id: string;
  userId: string;
}

export interface GetNotificationResponse {
  id: string;
  userId: string;
  type: string;
  title: string;
  content: string;
  read: boolean;
  bookingId?: string | undefined;
  vehicleId?: string | undefined;
  paymentId?: string | undefined;
  createdAt: string;
  updatedAt: string;
}

/** GetManyNotifications */
export interface GetManyNotificationsRequest {
  userId: string;
  page: number;
  limit: number;
}

export interface GetManyNotificationsResponse {
  notifications: GetNotificationResponse[];
}

/** CreateNotification */
export interface CreateNotificationRequest {
  userId: string;
  type: string;
  title: string;
  content: string;
}

/** MarkAsReadNotifications */
export interface MarkAsReadRequest {
  userId: string;
  notificationIds: string[];
}

export interface MessageResponse {
  message: string;
}

/** DeleteNotification */
export interface DeleteNotificationRequest {
  id: string;
  userId: string;
}

export const NOTIFICATION_PACKAGE_NAME = "notification";

export interface NotificationServiceClient {
  getNotification(request: GetNotificationRequest): Observable<GetNotificationResponse>;

  getManyNotifications(request: GetManyNotificationsRequest): Observable<GetManyNotificationsResponse>;

  createNotification(request: CreateNotificationRequest): Observable<GetNotificationResponse>;

  markAsReadNotifications(request: MarkAsReadRequest): Observable<MessageResponse>;

  deleteNotification(request: DeleteNotificationRequest): Observable<MessageResponse>;
}

export interface NotificationServiceController {
  getNotification(
    request: GetNotificationRequest,
  ): Promise<GetNotificationResponse> | Observable<GetNotificationResponse> | GetNotificationResponse;

  getManyNotifications(
    request: GetManyNotificationsRequest,
  ): Promise<GetManyNotificationsResponse> | Observable<GetManyNotificationsResponse> | GetManyNotificationsResponse;

  createNotification(
    request: CreateNotificationRequest,
  ): Promise<GetNotificationResponse> | Observable<GetNotificationResponse> | GetNotificationResponse;

  markAsReadNotifications(
    request: MarkAsReadRequest,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  deleteNotification(
    request: DeleteNotificationRequest,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;
}

export function NotificationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getNotification",
      "getManyNotifications",
      "createNotification",
      "markAsReadNotifications",
      "deleteNotification",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATION_SERVICE_NAME = "NotificationService";
