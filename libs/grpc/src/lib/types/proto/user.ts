// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export enum Gender {
  GENDER_UNSPECIFIED = 0,
  MALE = 1,
  FEMALE = 2,
  OTHER = 3,
  UNRECOGNIZED = -1,
}

export enum Role {
  ROLE_UNSPECIFIED = 0,
  USER = 1,
  ADMIN = 2,
  SUPER_ADMIN = 3,
  UNRECOGNIZED = -1,
}

/** GetUserProfile */
export interface GetUserProfileRequest {
  userId: string;
}

export interface GetUserProfileResponse {
  id: string;
  email: string;
  fullName: string;
  phone: string;
  role: string;
  gender?: Gender | undefined;
  avatarUrl?: string | undefined;
  facebookUrl?: string | undefined;
  bio?: string | undefined;
  birthDate?: string | undefined;
  creditScore: number;
  createdAt: string;
  updatedAt: string;
}

/** UpdateUserProfile */
export interface UpdateUserProfileRequest {
  userId: string;
  fullName?: string | undefined;
  phone?: string | undefined;
  avatarUrl?: string | undefined;
  facebookUrl?: string | undefined;
  bio?: string | undefined;
  birthDate?: string | undefined;
  gender?: Gender | undefined;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  getUserProfile(request: GetUserProfileRequest): Observable<GetUserProfileResponse>;

  updateUserProfile(request: UpdateUserProfileRequest): Observable<GetUserProfileResponse>;
}

export interface UserServiceController {
  getUserProfile(
    request: GetUserProfileRequest,
  ): Promise<GetUserProfileResponse> | Observable<GetUserProfileResponse> | GetUserProfileResponse;

  updateUserProfile(
    request: UpdateUserProfileRequest,
  ): Promise<GetUserProfileResponse> | Observable<GetUserProfileResponse> | GetUserProfileResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUserProfile", "updateUserProfile"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
