// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

/** Register */
export interface RegisterRequest {
  email: string;
  name: string;
  phone: string;
  password: string;
  confirmPassword: string;
  code: string;
}

export interface RegisterResponse {
  message: string;
}

/** Login */
export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  accessToken: string;
  refreshToken: string;
}

/** Refresh Token */
export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface RefreshTokenResponse {
  accessToken: string;
  refreshToken: string;
}

/** Logout */
export interface LogoutRequest {
  refreshToken: string;
}

export interface LogoutResponse {
  message: string;
}

/** Send OTP */
export interface SendOTPRequest {
  email: string;
  type: string;
}

export interface SendOTPResponse {
  message: string;
}

/** Forgot Password */
export interface ForgotPasswordRequest {
  email: string;
  code: string;
  newPassword: string;
  confirmNewPassword: string;
}

export interface ForgotPasswordResponse {
  message: string;
}

/** Authenticate (verify JWT token) */
export interface AuthenticateRequest {
  token: string;
}

export interface AuthenticateResponse {
  userId: string;
  email: string;
  role: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  register(request: RegisterRequest): Observable<RegisterResponse>;

  login(request: LoginRequest): Observable<LoginResponse>;

  refreshToken(request: RefreshTokenRequest): Observable<RefreshTokenResponse>;

  logout(request: LogoutRequest): Observable<LogoutResponse>;

  sendOtp(request: SendOTPRequest): Observable<SendOTPResponse>;

  forgotPassword(request: ForgotPasswordRequest): Observable<ForgotPasswordResponse>;

  authenticate(request: AuthenticateRequest): Observable<AuthenticateResponse>;
}

export interface AuthServiceController {
  register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

  logout(request: LogoutRequest): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  sendOtp(request: SendOTPRequest): Promise<SendOTPResponse> | Observable<SendOTPResponse> | SendOTPResponse;

  forgotPassword(
    request: ForgotPasswordRequest,
  ): Promise<ForgotPasswordResponse> | Observable<ForgotPasswordResponse> | ForgotPasswordResponse;

  authenticate(
    request: AuthenticateRequest,
  ): Promise<AuthenticateResponse> | Observable<AuthenticateResponse> | AuthenticateResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "register",
      "login",
      "refreshToken",
      "logout",
      "sendOtp",
      "forgotPassword",
      "authenticate",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
