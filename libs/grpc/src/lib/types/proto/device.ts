// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: device.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "device";

/** GetDevice */
export interface GetDeviceRequest {
  deviceId: string;
}

export interface GetDeviceResponse {
  id: string;
  name: string;
  price: number;
  description: string;
  status: string;
  quantity: number;
  information: string[];
  images: string[];
  categoryId: string;
  categoryName: string;
  createdAt: string;
  updatedAt: string;
}

/** GetManyDevices (User) */
export interface GetManyDevicesRequest {
  page: number;
  limit: number;
  status?: string | undefined;
  search?: string | undefined;
  categoryId?: string | undefined;
}

export interface GetManyDevices {
  name: string;
  price: number;
  description: string;
  status: string;
  quantity: number;
  information: string[];
  images: string[];
  categoryName: string;
}

export interface GetManyDevicesResponse {
  devices: GetManyDevices[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

/** GetManyDevicesAdmin (Admin) */
export interface GetManyDevicesAdmin {
  id: string;
  name: string;
  price: number;
  description: string;
  status: string;
  quantity: number;
  information: string[];
  images: string[];
  categoryId: string;
  categoryName: string;
  createdAt: string;
  updatedAt: string;
}

export interface GetManyDevicesAdminResponse {
  devices: GetManyDevicesAdmin[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

/** CreateDevice */
export interface CreateDeviceRequest {
  name: string;
  price: number;
  description: string;
  status: string;
  quantity: number;
  information: string[];
  images: string[];
  categoryId: string;
}

/** UpdateDevice */
export interface UpdateDeviceRequest {
  deviceId: string;
  name?: string | undefined;
  price?: number | undefined;
  description?: string | undefined;
  status?: string | undefined;
  quantity?: number | undefined;
  information: string[];
  images: string[];
  categoryId?: string | undefined;
}

/** DeleteDevice */
export interface DeleteDeviceRequest {
  deviceId: string;
}

export interface DeleteDeviceResponse {
  message: string;
}

/** GetCombo */
export interface GetComboRequest {
  comboId: string;
}

export interface ComboDeviceItem {
  deviceId: string;
  deviceName: string;
  devicePrice: number;
  quantity: number;
}

export interface GetComboResponse {
  id: string;
  name: string;
  price: number;
  description: string;
  images: string[];
  devices: ComboDeviceItem[];
  createdAt: string;
  updatedAt: string;
}

/** GetManyCombos */
export interface GetManyCombosRequest {
  page: number;
  limit: number;
  search?: string | undefined;
}

export interface GetManyCombos {
  id: string;
  name: string;
  price: number;
  description: string;
  images: string[];
  deviceCount: number;
  createdAt: string;
  updatedAt: string;
}

export interface GetManyCombosResponse {
  combos: GetManyCombos[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

/** CreateCombo */
export interface ComboDeviceInput {
  deviceId: string;
  quantity: number;
}

export interface CreateComboRequest {
  name: string;
  price: number;
  description: string;
  images: string[];
  deviceItems: ComboDeviceInput[];
}

/** UpdateCombo */
export interface UpdateComboRequest {
  comboId: string;
  name?: string | undefined;
  price?: number | undefined;
  description?: string | undefined;
  images: string[];
  deviceItems: ComboDeviceInput[];
}

/** DeleteCombo */
export interface DeleteComboRequest {
  comboId: string;
}

export interface DeleteComboResponse {
  message: string;
}

export const DEVICE_PACKAGE_NAME = "device";

export interface DeviceServiceClient {
  /** Device operations */

  getDevice(request: GetDeviceRequest): Observable<GetDeviceResponse>;

  /** User */

  getManyDevices(request: GetManyDevicesRequest): Observable<GetManyDevicesResponse>;

  /** Admin */

  getManyDevicesAdmin(request: GetManyDevicesRequest): Observable<GetManyDevicesAdminResponse>;

  createDevice(request: CreateDeviceRequest): Observable<GetDeviceResponse>;

  updateDevice(request: UpdateDeviceRequest): Observable<GetDeviceResponse>;

  deleteDevice(request: DeleteDeviceRequest): Observable<DeleteDeviceResponse>;

  /** Combo operations (Admin) */

  getCombo(request: GetComboRequest): Observable<GetComboResponse>;

  getManyCombos(request: GetManyCombosRequest): Observable<GetManyCombosResponse>;

  createCombo(request: CreateComboRequest): Observable<GetComboResponse>;

  updateCombo(request: UpdateComboRequest): Observable<GetComboResponse>;

  deleteCombo(request: DeleteComboRequest): Observable<DeleteComboResponse>;
}

export interface DeviceServiceController {
  /** Device operations */

  getDevice(request: GetDeviceRequest): Promise<GetDeviceResponse> | Observable<GetDeviceResponse> | GetDeviceResponse;

  /** User */

  getManyDevices(
    request: GetManyDevicesRequest,
  ): Promise<GetManyDevicesResponse> | Observable<GetManyDevicesResponse> | GetManyDevicesResponse;

  /** Admin */

  getManyDevicesAdmin(
    request: GetManyDevicesRequest,
  ): Promise<GetManyDevicesAdminResponse> | Observable<GetManyDevicesAdminResponse> | GetManyDevicesAdminResponse;

  createDevice(
    request: CreateDeviceRequest,
  ): Promise<GetDeviceResponse> | Observable<GetDeviceResponse> | GetDeviceResponse;

  updateDevice(
    request: UpdateDeviceRequest,
  ): Promise<GetDeviceResponse> | Observable<GetDeviceResponse> | GetDeviceResponse;

  deleteDevice(
    request: DeleteDeviceRequest,
  ): Promise<DeleteDeviceResponse> | Observable<DeleteDeviceResponse> | DeleteDeviceResponse;

  /** Combo operations (Admin) */

  getCombo(request: GetComboRequest): Promise<GetComboResponse> | Observable<GetComboResponse> | GetComboResponse;

  getManyCombos(
    request: GetManyCombosRequest,
  ): Promise<GetManyCombosResponse> | Observable<GetManyCombosResponse> | GetManyCombosResponse;

  createCombo(request: CreateComboRequest): Promise<GetComboResponse> | Observable<GetComboResponse> | GetComboResponse;

  updateCombo(request: UpdateComboRequest): Promise<GetComboResponse> | Observable<GetComboResponse> | GetComboResponse;

  deleteCombo(
    request: DeleteComboRequest,
  ): Promise<DeleteComboResponse> | Observable<DeleteComboResponse> | DeleteComboResponse;
}

export function DeviceServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getDevice",
      "getManyDevices",
      "getManyDevicesAdmin",
      "createDevice",
      "updateDevice",
      "deleteDevice",
      "getCombo",
      "getManyCombos",
      "createCombo",
      "updateCombo",
      "deleteCombo",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DeviceService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DeviceService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DEVICE_SERVICE_NAME = "DeviceService";
