// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: review.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "review";

export enum ReviewType {
  DEVICE = 0,
  VEHICLE = 1,
  COMBO = 2,
  UNRECOGNIZED = -1,
}

export enum SortField {
  CREATED_AT = 0,
  UPDATED_AT = 1,
  RATING = 2,
  TITLE = 3,
  UNRECOGNIZED = -1,
}

export enum SortOrder {
  ASCENDING = 0,
  DESCENDING = 1,
  UNRECOGNIZED = -1,
}

/** Review entity */
export interface Review {
  id: string;
  bookingId: string;
  vehicleId: string;
  deviceId: string;
  comboId: string;
  userId: string;
  rating: number;
  title: string;
  type: ReviewType;
  content: string;
  images: string[];
  createdAt: string;
  updatedAt: string;
  updateCount: number;
  rentalId: string;
}

/** Review summary (no content/images) */
export interface ReviewSummary {
  id: string;
  bookingId: string;
  vehicleId: string;
  deviceId: string;
  comboId: string;
  userId: string;
  rating: number;
  title: string;
  type: ReviewType;
  createdAt: string;
  updatedAt: string;
  updateCount: number;
  rentalId: string;
}

/** Request messages */
export interface CreateReviewRequest {
  bookingId?: string | undefined;
  userId: string;
  rentalId?: string | undefined;
  rating: number;
  title: string;
  type: ReviewType;
  content: string;
  images: string[];
}

export interface UpdateReviewRequest {
  reviewId: string;
  userId: string;
  rating: number;
  title: string;
  content: string;
  images: string[];
}

export interface DeleteReviewRequest {
  reviewId: string;
  userId: string;
}

export interface GetReviewByIdRequest {
  reviewId: string;
}

export interface GetMyReviewsRequest {
  userId: string;
  page: number;
  limit: number;
  /** Query options */
  searchText?: string | undefined;
  minRating?: number | undefined;
  maxRating?:
    | number
    | undefined;
  /** ISO 8601 format */
  startDate?:
    | string
    | undefined;
  /** ISO 8601 format */
  endDate?: string | undefined;
  sortBy?: SortField | undefined;
  sortOrder?: SortOrder | undefined;
}

export interface GetReviewsByVehicleRequest {
  vehicleId: string;
  page: number;
  limit: number;
  /** Query options */
  searchText?: string | undefined;
  minRating?: number | undefined;
  maxRating?: number | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  sortBy?: SortField | undefined;
  sortOrder?: SortOrder | undefined;
}

export interface GetReviewsByDeviceRequest {
  deviceId: string;
  page: number;
  limit: number;
  /** Query options */
  searchText?: string | undefined;
  minRating?: number | undefined;
  maxRating?: number | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  sortBy?: SortField | undefined;
  sortOrder?: SortOrder | undefined;
}

export interface GetReviewsByComboRequest {
  comboId: string;
  page: number;
  limit: number;
  /** Query options */
  searchText?: string | undefined;
  minRating?: number | undefined;
  maxRating?: number | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  sortBy?: SortField | undefined;
  sortOrder?: SortOrder | undefined;
}

export interface GetAllReviewsRequest {
  adminId: string;
  page: number;
  limit: number;
  type: ReviewType;
  /** Query options */
  searchText: string;
  minRating: number;
  maxRating: number;
  startDate: string;
  endDate: string;
  sortBy: SortField;
  sortOrder: SortOrder;
}

export interface AdminDeleteReviewRequest {
  reviewId: string;
  adminId: string;
}

/** Response messages */
export interface ReviewResponse {
  review: Review | undefined;
  message: string;
}

export interface GetReviewsResponse {
  reviews: Review[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

export interface GetMyReviewsResponse {
  reviews: Review[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

export interface DeleteReviewResponse {
  success: boolean;
  message: string;
}

export const REVIEW_PACKAGE_NAME = "review";

export interface ReviewServiceClient {
  /** User operations */

  createReview(request: CreateReviewRequest): Observable<ReviewResponse>;

  updateReview(request: UpdateReviewRequest): Observable<ReviewResponse>;

  deleteReview(request: DeleteReviewRequest): Observable<DeleteReviewResponse>;

  getMyReviews(request: GetMyReviewsRequest): Observable<GetMyReviewsResponse>;

  getReviewById(request: GetReviewByIdRequest): Observable<ReviewResponse>;

  /** Public operations */

  getReviewsByVehicle(request: GetReviewsByVehicleRequest): Observable<GetReviewsResponse>;

  getReviewsByDevice(request: GetReviewsByDeviceRequest): Observable<GetReviewsResponse>;

  getReviewsByCombo(request: GetReviewsByComboRequest): Observable<GetReviewsResponse>;

  /** Admin operations */

  getAllReviews(request: GetAllReviewsRequest): Observable<GetReviewsResponse>;

  adminDeleteReview(request: AdminDeleteReviewRequest): Observable<DeleteReviewResponse>;
}

export interface ReviewServiceController {
  /** User operations */

  createReview(request: CreateReviewRequest): Promise<ReviewResponse> | Observable<ReviewResponse> | ReviewResponse;

  updateReview(request: UpdateReviewRequest): Promise<ReviewResponse> | Observable<ReviewResponse> | ReviewResponse;

  deleteReview(
    request: DeleteReviewRequest,
  ): Promise<DeleteReviewResponse> | Observable<DeleteReviewResponse> | DeleteReviewResponse;

  getMyReviews(
    request: GetMyReviewsRequest,
  ): Promise<GetMyReviewsResponse> | Observable<GetMyReviewsResponse> | GetMyReviewsResponse;

  getReviewById(request: GetReviewByIdRequest): Promise<ReviewResponse> | Observable<ReviewResponse> | ReviewResponse;

  /** Public operations */

  getReviewsByVehicle(
    request: GetReviewsByVehicleRequest,
  ): Promise<GetReviewsResponse> | Observable<GetReviewsResponse> | GetReviewsResponse;

  getReviewsByDevice(
    request: GetReviewsByDeviceRequest,
  ): Promise<GetReviewsResponse> | Observable<GetReviewsResponse> | GetReviewsResponse;

  getReviewsByCombo(
    request: GetReviewsByComboRequest,
  ): Promise<GetReviewsResponse> | Observable<GetReviewsResponse> | GetReviewsResponse;

  /** Admin operations */

  getAllReviews(
    request: GetAllReviewsRequest,
  ): Promise<GetReviewsResponse> | Observable<GetReviewsResponse> | GetReviewsResponse;

  adminDeleteReview(
    request: AdminDeleteReviewRequest,
  ): Promise<DeleteReviewResponse> | Observable<DeleteReviewResponse> | DeleteReviewResponse;
}

export function ReviewServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createReview",
      "updateReview",
      "deleteReview",
      "getMyReviews",
      "getReviewById",
      "getReviewsByVehicle",
      "getReviewsByDevice",
      "getReviewsByCombo",
      "getAllReviews",
      "adminDeleteReview",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ReviewService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ReviewService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REVIEW_SERVICE_NAME = "ReviewService";
