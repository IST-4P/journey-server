// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: vehicle.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "vehicle";

/**
 * ======================================================== Feature
 * GetFeature
 */
export interface GetFeatureRequest {
  id?: string | undefined;
  name?: string | undefined;
}

export interface GetFeatureResponse {
  id: string;
  name: string;
  description: string;
  icon: string;
  createdAt: string;
  updatedAt: string;
}

/** GetAllFeatures */
export interface GetAllFeaturesRequest {
}

export interface GetAllFeaturesResponse {
  features: GetFeatureResponse[];
}

/** CreateFeatures */
export interface CreateFeatureRequest {
  name: string;
  description: string;
  icon: string;
}

/** UpdateFeatures */
export interface UpdateFeatureRequest {
  name?: string | undefined;
  description?: string | undefined;
  icon?: string | undefined;
  id: string;
}

/**
 * ======================================================== Brand
 * GetAllBrands
 */
export interface GetAllBrandsRequest {
}

export interface GetBrandResponse {
  id: string;
  name: string;
}

export interface GetAllBrandsResponse {
  brands: GetBrandResponse[];
}

/** CreateBrand */
export interface CreateBrandRequest {
  name: string;
}

/** UpdateBrand */
export interface UpdateBrandRequest {
  id: string;
  name: string;
}

/** DeleteBrand */
export interface DeleteBrandRequest {
  id?: string | undefined;
  name?: string | undefined;
}

/** GetAllModels */
export interface GetAllModelsRequest {
  brandId?: string | undefined;
}

export interface GetModelResponse {
  id: string;
  name: string;
  brandId: string;
}

export interface GetAllModelsResponse {
  models: GetModelResponse[];
}

/** CreateModel */
export interface CreateModelRequest {
  name: string;
  brandId: string;
}

/** UpdateModel */
export interface UpdateModelRequest {
  id: string;
  name?: string | undefined;
  brandId?: string | undefined;
}

/** DeleteModel */
export interface DeleteModelRequest {
  id?: string | undefined;
  name?: string | undefined;
}

/**
 * ======================================================== Vehicle
 * GetVehicle
 */
export interface GetVehicleRequest {
  id?: string | undefined;
  licensePlate?: string | undefined;
}

export interface VehicleFeature {
  feature: GetFeatureResponse | undefined;
}

export interface GetVehicleResponse {
  id: string;
  type: string;
  name: string;
  brandId: string;
  modelId: string;
  licensePlate: string;
  seats: number;
  fuelType: string;
  transmission: string;
  pricePerHour: number;
  pricePerDay: number;
  location: string;
  city: string;
  ward: string;
  latitude: number;
  longitude: number;
  description: string;
  terms: string[];
  status: string;
  totalTrips: number;
  averageRating: number;
  totalReviewIds: string[];
  images: string[];
  vehicleFeatures: VehicleFeature[];
  createdAt: string;
  updatedAt: string;
}

/** GetManyVehicles */
export interface GetManyVehiclesRequest {
  id?: string | undefined;
  type?: string | undefined;
  name?: string | undefined;
  brandId?: string | undefined;
  modelId?: string | undefined;
  licensePlate?: string | undefined;
  seats?: number | undefined;
  fuelType?: string | undefined;
  transmission?: string | undefined;
  city?: string | undefined;
  ward?: string | undefined;
  status?: string | undefined;
  averageRating?: number | undefined;
  page: number;
  limit: number;
}

export interface GetManyVehiclesResponse {
  vehicles: GetVehicleResponse[];
  page: number;
  limit: number;
  totalItems: number;
  totalPages: number;
}

/** CreateVehicle */
export interface CreateVehicleRequest {
  type: string;
  name: string;
  brandId: string;
  modelId: string;
  licensePlate: string;
  seats: number;
  fuelType: string;
  transmission: string;
  pricePerHour: number;
  pricePerDay: number;
  location: string;
  city: string;
  ward: string;
  latitude: number;
  longitude: number;
  description: string;
  terms: string[];
  status: string;
  images: string[];
  featureIds: string[];
}

/** UpdateVehicle */
export interface UpdateVehicleRequest {
  type?: string | undefined;
  name?: string | undefined;
  brandId?: string | undefined;
  modelId?: string | undefined;
  licensePlate?: string | undefined;
  seats?: number | undefined;
  fuelType?: string | undefined;
  transmission?: string | undefined;
  pricePerHour?: number | undefined;
  pricePerDay?: number | undefined;
  location?: string | undefined;
  city?: string | undefined;
  ward?: string | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  description?: string | undefined;
  terms: string[];
  status?: string | undefined;
  images: string[];
  featureIds: string[];
  id: string;
}

export interface MessageResponse {
  message: string;
}

export const VEHICLE_PACKAGE_NAME = "vehicle";

export interface VehicleServiceClient {
  getFeature(request: GetFeatureRequest): Observable<GetFeatureResponse>;

  getAllFeatures(request: GetAllFeaturesRequest): Observable<GetAllFeaturesResponse>;

  createFeature(request: CreateFeatureRequest): Observable<GetFeatureResponse>;

  updateFeature(request: UpdateFeatureRequest): Observable<GetFeatureResponse>;

  deleteFeature(request: GetFeatureRequest): Observable<MessageResponse>;

  getAllBrands(request: GetAllBrandsRequest): Observable<GetAllBrandsResponse>;

  createBrand(request: CreateBrandRequest): Observable<GetBrandResponse>;

  updateBrand(request: UpdateBrandRequest): Observable<GetBrandResponse>;

  deleteBrand(request: DeleteBrandRequest): Observable<MessageResponse>;

  getAllModels(request: GetAllModelsRequest): Observable<GetAllModelsResponse>;

  createModel(request: CreateModelRequest): Observable<GetModelResponse>;

  updateModel(request: UpdateModelRequest): Observable<GetModelResponse>;

  deleteModel(request: DeleteModelRequest): Observable<MessageResponse>;

  getVehicle(request: GetVehicleRequest): Observable<GetVehicleResponse>;

  getManyVehicles(request: GetManyVehiclesRequest): Observable<GetManyVehiclesResponse>;

  createVehicle(request: CreateVehicleRequest): Observable<GetVehicleResponse>;

  updateVehicle(request: UpdateVehicleRequest): Observable<GetVehicleResponse>;

  deleteVehicle(request: GetVehicleRequest): Observable<MessageResponse>;
}

export interface VehicleServiceController {
  getFeature(
    request: GetFeatureRequest,
  ): Promise<GetFeatureResponse> | Observable<GetFeatureResponse> | GetFeatureResponse;

  getAllFeatures(
    request: GetAllFeaturesRequest,
  ): Promise<GetAllFeaturesResponse> | Observable<GetAllFeaturesResponse> | GetAllFeaturesResponse;

  createFeature(
    request: CreateFeatureRequest,
  ): Promise<GetFeatureResponse> | Observable<GetFeatureResponse> | GetFeatureResponse;

  updateFeature(
    request: UpdateFeatureRequest,
  ): Promise<GetFeatureResponse> | Observable<GetFeatureResponse> | GetFeatureResponse;

  deleteFeature(request: GetFeatureRequest): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  getAllBrands(
    request: GetAllBrandsRequest,
  ): Promise<GetAllBrandsResponse> | Observable<GetAllBrandsResponse> | GetAllBrandsResponse;

  createBrand(request: CreateBrandRequest): Promise<GetBrandResponse> | Observable<GetBrandResponse> | GetBrandResponse;

  updateBrand(request: UpdateBrandRequest): Promise<GetBrandResponse> | Observable<GetBrandResponse> | GetBrandResponse;

  deleteBrand(request: DeleteBrandRequest): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  getAllModels(
    request: GetAllModelsRequest,
  ): Promise<GetAllModelsResponse> | Observable<GetAllModelsResponse> | GetAllModelsResponse;

  createModel(request: CreateModelRequest): Promise<GetModelResponse> | Observable<GetModelResponse> | GetModelResponse;

  updateModel(request: UpdateModelRequest): Promise<GetModelResponse> | Observable<GetModelResponse> | GetModelResponse;

  deleteModel(request: DeleteModelRequest): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  getVehicle(
    request: GetVehicleRequest,
  ): Promise<GetVehicleResponse> | Observable<GetVehicleResponse> | GetVehicleResponse;

  getManyVehicles(
    request: GetManyVehiclesRequest,
  ): Promise<GetManyVehiclesResponse> | Observable<GetManyVehiclesResponse> | GetManyVehiclesResponse;

  createVehicle(
    request: CreateVehicleRequest,
  ): Promise<GetVehicleResponse> | Observable<GetVehicleResponse> | GetVehicleResponse;

  updateVehicle(
    request: UpdateVehicleRequest,
  ): Promise<GetVehicleResponse> | Observable<GetVehicleResponse> | GetVehicleResponse;

  deleteVehicle(request: GetVehicleRequest): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;
}

export function VehicleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getFeature",
      "getAllFeatures",
      "createFeature",
      "updateFeature",
      "deleteFeature",
      "getAllBrands",
      "createBrand",
      "updateBrand",
      "deleteBrand",
      "getAllModels",
      "createModel",
      "updateModel",
      "deleteModel",
      "getVehicle",
      "getManyVehicles",
      "createVehicle",
      "updateVehicle",
      "deleteVehicle",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("VehicleService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("VehicleService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const VEHICLE_SERVICE_NAME = "VehicleService";
